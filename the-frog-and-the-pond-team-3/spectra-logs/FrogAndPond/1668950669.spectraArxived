//Hadas 
//Shani 
import "./imports/DwyerPatterns.spectra"

spec FrogAndPond

define DX := 7;
define DY := 7;
type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX freePoint1X;
env DimY freePoint1Y;
env DimX freePoint2X;
env DimY freePoint2Y;
 
sys DimX frogX;
sys DimY frogY;

//sys boolean carsMove;
//	
////freePoints start points
//asm ini freePoint1X = 2;
//asm ini freePoint2X = 5;
//asm ini freePoint1Y = 0;
//asm ini freePoint2Y = 3;
//
//define
// atPond := frogX = 7 & frogY = 7;
// start :=  frogX = 0 & frogY = 0;
//
//// frog start point is 0, 0 
//gar ini start; 
//
////1- frog step
//gar always moveDistX(frogX) & moveDistY(frogY); 
//
//
//predicate moveDistX(DimX pos):
//  pos+1 = next(pos) |
//  pos   = next(pos) |
//  pos-1 = next(pos);     
//
//
//predicate moveDistY(DimY pos):
//  pos+1 = next(pos) |
//  pos   = next(pos) |
//  pos-1 = next(pos);     
//
//// frog ends in pond   
//gar
//  alwEv atPond;
//
//gar alw atPond -> (frogX=next(frogX) & frogY=next(frogY)); 
//  
// 
//define frogMoves := (frogX+1 = next(frogX)) | (frogX-1 = next(frogX)) | (frogY+1 = next(frogY)) | (frogY-1 = next(frogY));
//
//counter frogCounter(0..3){
//	frogCounter = 0;
//	inc: frogMoves;
//	overflow: modulo; 
//}
//
//asm alw frogCounter = 3 -> (moveDistY(freePoint1Y) & moveDistY(freePoint2Y));
//
////2c- cars move three times slower than the frog
//gar carsSlowerThanFrog:
//  alw frogCounter < 3 implies !carsMove; 
//  
//  
////2ab- cars steps 
//asm carsMoveUpAndDown:
//  alw freePoint1X = 2 & freePoint2X = 5 & (frogCounter = 3 -> (moveDistY(freePoint1Y) & moveDistY(freePoint2Y))); 
//  
////2d- frog cross cars only on free points 
//asm alw frogX=2 -> freePoint1Y = frogY;  
//asm alw frogX=5 -> freePoint2Y = frogY; 
//asm alw next(frogX) = 2 -> next(frogY) = next(freePoint1Y);
//asm alw next(frogX) = 5 -> next(frogY) = next(freePoint2Y);
//
////2e- cars dont move when frog is in their column 
//gar alw (frogX=2 | frogX=5) -> (freePoint1Y = next(freePoint1Y) & freePoint2Y = next(freePoint2Y));  