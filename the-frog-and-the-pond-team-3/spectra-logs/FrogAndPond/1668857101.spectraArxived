import "./imports/DwyerPatterns.spectra"

spec FrogAndPond

define DX := 7;
define DY := 7;
type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX freePoint1X;
env DimY freePoint1Y;
env DimX freePoint2X;
env DimY freePoint2Y;
 
sys DimX frogX;
sys DimY frogY;

sys boolean carsMove;

define
 atPond := frogX = 7 & frogY = 7;
 start :=  frogX = 0 & frogY = 0;

guarantee ini start; 


gar frogMoves:
  always moveDistX(frogX) & moveDistY(frogY); 

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     

predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     
  
gar
  alwEv atPond;

gar alw atPond -> frogX=next(frogX) & frogY=next(frogY); 
  

counter frogCounter(0..3){
	frogCounter = 0;
	inc: !carsMove;
	reset: carsMove;
	overflow: keep; 
}

gar carsSlowerThanFrog:
  alw frogCounter < 3 implies !carsMove; 
  
  
  