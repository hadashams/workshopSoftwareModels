
//Hadas 
//Shani 
import "./imports/DwyerPatterns.spectra"

spec FrogAndPond

define DX := 7;
define DY := 7;
type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX freePoint1X;
env DimY freePoint1Y;
env DimX freePoint2X;
env DimY freePoint2Y;
 
sys DimX frogX;
sys DimY frogY;

sys boolean carsMove;
	
//freePoints start points
asm ini freePoint1X = 2;
asm ini freePoint2X = 5;
asm ini freePoint1Y = 4;
asm ini freePoint2Y = 6;

define
 atPond := frogX = 7 & frogY = 7;
 start :=  frogX = 0 & frogY = 0;

//frog start point is 0, 0 
gar ini start; 

//1- frog step
gar always moveDistX(frogX) & moveDistY(frogY); 

//cars steps 
asm alw moveDistY(freePoint1Y);
asm alw moveDistY(freePoint2Y);

predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     


predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     

// frog ends at pond   
gar alwEv atPond;

gar alw atPond -> (next(frogX)=frogX & next(frogY)=frogY); 
  
 
define frogMoves := (frogX+1 = next(frogX)) | (frogX-1 = next(frogX)) | (frogY+1 = next(frogY)) | (frogY-1 = next(frogY));

counter frogCounter(0..3){
	frogCounter = 0;
	inc: frogMoves;
	overflow: modulo; 
}

asm alw frogCounter = 3 -> (moveDistY(freePoint1Y) & moveDistY(freePoint2Y));

gar alw (next(frogY) != next(freePoint1Y)) implies next(frogX) != 2;

gar alw (next(frogY) != next(freePoint2Y)) implies next(frogX) != 5;