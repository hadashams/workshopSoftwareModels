import "./imports/DwyerPatterns.spectra"

spec FrogAndPond

define DX := 7;
define DY := 7;
type DimX = Int(0..DX);
type DimY = Int(0..DY);

env DimX freePoint1X;
env DimY freePoint1Y;
env DimX freePoint2X;
env DimY freePoint2Y;
 
sys DimX frogX;
sys DimY frogY;

sys boolean carsMove;

define
 atPond := frogX = 7 & frogY = 7;
 start :=  frogX = 0 & frogY = 0;

// frog start point is 0, 0 
gar ini start; 

//1- frog step
gar frogMoves:
  always moveDistX(frogX) & moveDistY(frogY); 


predicate moveDistX(DimX pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     


predicate moveDistY(DimY pos):
  pos+1 = next(pos) |
  pos   = next(pos) |
  pos-1 = next(pos);     

// frog ends in pond   
gar
  alwEv atPond;

gar alw atPond -> (frogX=next(frogX) & frogY=next(frogY)); 
  

counter frogCounter(0..3){
	frogCounter = 0;
	inc: !carsMove;
	reset: carsMove;
	overflow: keep; 
}


gar alw freePoint1Y=next(freePoint1Y) -> !carsMove;

//2c- cars move three times slower than the frog
gar carsSlowerThanFrog:
  alw frogCounter < 3 implies !carsMove; 
  
  
//2ab- cars steps 
asm carsMoveUpAndDown:
  alw freePoint1X = 2 & moveDistY(freePoint1Y) & freePoint2X = 5 & moveDistY(freePoint2Y); 
  
//2d- frog cross cars only on free points 
gar alw frogX=2 -> freePoint1Y = frogY;  
gar alw frogX=5 -> freePoint2Y = frogY; 

//2e- cars dont move when frog is in their column 
gar alw frogX=2 -> freePoint1Y = next(freePoint1Y) & frogX=5 -> freePoint2Y = next(freePoint2Y);  